Another way for testing:
https://stackoverflow.com/questions/23729790/how-can-i-do-test-setup-using-the-testing-package-in-go

Good method for creating Mux routers for testing:
https://www.thepolyglotdeveloper.com/2017/02/unit-testing-golang-application-includes-http/


To connect to AWS:

In security: 

scp -i crud-microserv-key.pem installallbinary ubuntu@ec2-13-58-114-112.us-east-2.compute.amazonaws.com:

ssh -i crud-microserv-key.pem ubuntu@ec2-13-58-114-112.us-east-2.compute.amazonaws.com

Useful docker commands are in our make file. Here's a few extra:
docker run -d -p 80:4000 -v photo-images:/static/images/pictures americanwonton/prodcrudproj
docker run -it -p 80:4000 -v photo-images:/static/images/pictures americanwonton/prodcrudproj
docker run -it -p 80:4000 -v big-photo:/amazonimages/ americanwonton/prodcrudproj
docker run -it -p 80:4000 americanwonton/prodcrudproj
docker run -d -p 80:4000 americanwonton/prodcrudproj
docker pull americanwonton/prodcrudproj:latest
sudo docker login --username americanwonton --password peanutdoggydoo111
How to Explore a Docker Filesystem:
https://www.baeldung.com/ops/docker-container-filesystem
NOTE ON ABOVE: We have alpine on this dockerfile, so we need to go to the Alpine Linux suggestion
docker exec -it af253110d1d2 /bin/sh

To run in docker:
docker run -it --env-file ./env.list -d -p 80:4000 americanwonton/prodcrudproj

Run Interactive Terminal:
docker run -it --env-file ./env.list -it -p 80:4000 americanwonton/prodcrudproj